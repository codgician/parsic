var searchIndex = JSON.parse('{\
"parsic":{"doc":"A naive parser combinator written while learning Rust.","t":[0,0,0,8,8,3,8,8,8,8,8,5,11,11,5,11,11,11,11,11,11,2,5,11,11,5,11,11,5,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,5,11,11,5,11,11,5,11,11,5,11,11,5,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,13,13,4,3,8,3,3,3,16,16,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,2,0,8,5,5,5,5,5,5,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["combinators","core","primitives","AlternativeExt","ApplicativeExt","Fix","FunctorExt","LogExt","MonadExt","ReplicativeExt","SequentialExt","and","and","and","bind","bind","bind","borrow","borrow_mut","clone","clone_into","combinators","compose","compose","compose","empty","error","error","fix","from","info","info","inspect","inspect","into","left","left","left","many","many","many","map","map","map","map_option","map_option","map_option","map_result","map_result","map_result","mid","mid","mid","optional","optional","optional","or","or","or","parse","pure","recover","recover","right","right","right","some","some","some","to_owned","try_from","try_into","type_id","warn","warn","Error","Info","Msg","MsgBody","Parsable","ParseLogger","Parser","Pos","Result","Stream","Warn","add","add","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","col","core","default","default","eq","eq","eq","eq","exec","exec","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","into_parser","into_parser","is_empty","len","msg","mul","ne","ne","ne","ne","new","new","new","parse","parse","pos","row","shl","shr","stack","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with","0","0","0","combinators","primitives","stream","PrimitiveExt","char","literal","regex","satisfy","space","trim","trim","CharStream","as_str","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","into_iter","is_empty","len","new","next","pos","to_owned","try_from","try_into","type_id"],"q":["parsic","","","parsic::combinators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parsic::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parsic::core::Msg","","","parsic::primitives","","","parsic::primitives::combinators","","","","","","","","parsic::primitives::stream","","","","","","","","","","","","","","","","","","",""],"d":["Generic parser combinators.","Definitions of a parser and its friends.","<code>CharStream</code> and its primitive parser combinators.","","","","","Implement error related combinators for <code>Parsable&lt;S&gt;</code>.","","","","Combinator: <code>and</code> (function ver.)","Combinator: <code>and</code>","Combinator: <code>and</code>","Combinator: <code>bind</code> (function ver.)","Combinator: <code>bind</code>","Combinator: <code>bind</code>","","","","","","Combinator: <code>compose</code> (function ver.)","Combinator: <code>compose</code>","Combinator: <code>compose</code>","Combinator: <code>empty</code>","Combinator: <code>error</code>","Combinator: <code>error</code>","Combinator: <code>fix</code>","Returns the argument unchanged.","Combinator: <code>info</code>","Combinator: <code>info</code>","Combinator: <code>inspect</code>","Combinator: <code>inspect</code>","Calls <code>U::from(self)</code>.","Combinator: <code>left</code> (function ver.)","Combinator: <code>left</code>","Combinator: <code>left</code>","Combinator: <code>many</code> (function ver.)","Combinator: <code>many</code>","Combinator: <code>many</code>","Combinator: <code>map</code> (function ver.)","Combinator: <code>map</code>","Combinator: <code>map</code>","Combinator: <code>map_option</code> (function ver.)","Combinator: <code>map_option</code>","Combinator: <code>map_option</code>","Combinator: <code>map_result</code> (function ver.)","Combinator: <code>map_result</code>","Combinator: <code>map_result</code>","Combinator: <code>mid</code> (function ver.)","Combinator: <code>mid</code>","Combinator: <code>mid</code>","Combinator: <code>optional</code> (function ver.)","Combinator: <code>optional</code>","Combinator: <code>optional</code>","Combinator: <code>or</code> (function ver.)","Combinator: <code>or</code>","Combinator: <code>or</code>","fix f = f (fix f)","Combinator: <code>pure</code>","Combinator: <code>recover</code>","Combinator: <code>recover</code>","Combinator: <code>right</code> (function ver.)","Combinator: <code>right</code>","Combinator: <code>right</code>","Combinator: <code>some</code> (function ver.)","Combinator: <code>some</code> (function ver.)","Combinator: <code>some</code> (function ver.)","","","","","Combinator: <code>warn</code>","Combinator: <code>warn</code>","","","Data structure for log messages.","Struct <code>MsgBody</code>","<code>Parsable</code> trait","Struct <code>ParseLogger</code>","<code>Parser</code> struct","Struct <code>Pos</code>","","","","","Insert a new log message","","","","","","","","","","","","","Clear all existing logs","","","","","","","","","","","","","","","","","","","Wrapper for parse function","Wrapper for parse function","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Convert into a Parser","Convert into a Parser","Check if logger is empty","Return number of logs","","","","","","","","","","Parse function","","","","","","","","","","","","","","","","","","","","","","","","","","","","Intialize a new instance with provided log message","","","","","","","Implement <code>trim</code> method for <code>Parsable&lt;CharStream&gt;</code>:","Combinator: <code>char</code>","Combinator: <code>literal</code>","Combinator: <code>regex</code>","Combinator: <code>satisfy</code>","Combinator: <code>space</code>","Combinator: <code>trim</code> (function ver.)","Combinator: <code>trim</code>","Struct: <code>CharStream</code>","Return the <code>&amp;str</code> form of parse stream","","","","","","Returns the argument unchanged.","Return current index","Calls <code>U::from(self)</code>.","","Check if the stream is empty","Return length of parse string","Create a new CharStream instance","","Return current position of parsing","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,2,2,3,3,3,3,0,0,4,4,0,5,5,0,3,5,5,5,5,3,0,1,1,0,6,6,0,7,7,0,7,7,0,7,7,0,1,1,0,8,8,0,8,8,3,0,5,5,0,1,1,0,6,6,3,3,3,3,5,5,9,9,0,0,0,0,0,0,10,10,9,11,12,13,13,11,9,14,12,13,11,9,14,12,13,12,11,9,14,12,13,11,9,14,12,13,11,0,11,12,11,9,14,12,10,10,11,9,9,14,12,11,9,14,12,13,11,9,14,12,13,12,10,10,12,12,14,13,11,9,14,12,11,14,13,10,13,14,11,13,13,12,11,9,14,12,13,9,11,9,14,12,13,11,9,14,12,13,11,9,14,12,13,12,15,16,17,0,0,0,0,0,0,0,0,0,0,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0],["",0]]],null,[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3]],[[["str",0]],["parser",3]],[[["str",0]],["parser",3]],[[],["parser",3]],[[]],[[["str",0]],["parser",3]],[[["str",0]],["parser",3]],[[],["parser",3]],[[],["parser",3]],[[]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["vec",3],["clone",8]]]],[[],["parser",3,[["vec",3]]]],[[],["parser",3,[["vec",3]]]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["option",4,[["clone",8]]],["clone",8]]]],[[],["parser",3,[["option",4]]]],[[],["parser",3,[["option",4]]]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[["",0],["",0],["parselogger",3]],["option",4]],[[["clone",8]],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["clone",8]]]],[[],["parser",3]],[[],["parser",3]],[[],["parser",3,[["vec",3],["clone",8]]]],[[],["parser",3,[["vec",3]]]],[[],["parser",3,[["vec",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["str",0]],["parser",3]],[[["str",0]],["parser",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0],["usize",0]]],[[["",0],["msg",4]]],[[]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["pos",3]],[[["",0]],["msg",4]],[[["",0]],["msgbody",3]],[[["",0]],["parselogger",3]],[[["",0]],["parser",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["usize",0]],null,[[],["pos",3]],[[],["parselogger",3]],[[["",0],["pos",3]],["bool",0]],[[["",0],["msg",4]],["bool",0]],[[["",0],["msgbody",3]],["bool",0]],[[["",0],["parselogger",3]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parser",3]],[[],["parser",3]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],null,[[]],[[["",0],["pos",3]],["bool",0]],[[["",0],["msg",4]],["bool",0]],[[["",0],["msgbody",3]],["bool",0]],[[["",0],["parselogger",3]],["bool",0]],[[["usize",0],["usize",0]]],[[["str",0],["option",4,[["pos",3]]]]],[[]],[[["",0],["parselogger",3]],["option",4]],[[["",0],["parselogger",3]],["option",4]],null,[[["",0]],["usize",0]],[[]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["msg",4]]],null,null,null,null,null,null,null,[[["char",0]],["parser",3,[["char",0],["charstream",3]]]],[[["str",0]],["parser",3,[["str",0],["charstream",3]]]],[[["str",0]],["parser",3,[["str",0],["charstream",3]]]],[[],["parser",3,[["char",0],["charstream",3]]]],[[],["parser",3,[["char",0],["charstream",3]]]],[[],["parser",3,[["charstream",3]]]],[[],["parser",3,[["charstream",3]]]],null,[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["charstream",3]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["usize",0]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["str",0]]],[[["",0]],["option",4]],[[["",0]],["pos",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"SequentialExt"],[8,"MonadExt"],[3,"Fix"],[8,"ApplicativeExt"],[8,"LogExt"],[8,"ReplicativeExt"],[8,"FunctorExt"],[8,"AlternativeExt"],[4,"Msg"],[8,"Parsable"],[3,"Pos"],[3,"ParseLogger"],[3,"Parser"],[3,"MsgBody"],[13,"Info"],[13,"Warn"],[13,"Error"],[8,"PrimitiveExt"],[3,"CharStream"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};